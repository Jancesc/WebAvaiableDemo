{"version":3,"sources":["assets/Script/Test.ts"],"names":["_a","cc","_decorator","ccclass","property","SimpleAudioManager","_super","_this","apply","this","arguments","audioClip","restoreButton","autoRestoringTip","playingAudioMap","backgroundTime","__extends","prototype","onLoad","game","on","EVENT_SHOW","handleGameShow","EVENT_HIDE","handleGameHide","initUI","active","Node","EventType","TOUCH_END","onRestoreButtonClick","play","audioId","audioEngine","playEffect","setVolume","clip","time","loop","volume","setFinishCallback","console","log","id","Date","now","getCurrentTime","parseInt","e","error","backgroundDuration","toFixed","sys","os","OS_IOS","scheduleOnce","rebuildAudioContext","playActivationSound","Object","keys","length","tryAutoRestore","anySuccess","newIds","_loop_1","info_1","this_1","newId_1","setTimeout","setCurrentTime","_loop_2","oldId","newId","info","this_2","warn","createSimpleRestoreButton","node","width","height","addComponent","Sprite","spriteFrame","SpriteFrame","labelNode","label","Label","string","fontSize","parent","director","getScene","x","winSize","y","isValid","removeFromParent","oldContext","__audioSupport","context","state","close","AudioContextClass","window","AudioContext","webkitAudioContext","oscillator_1","createOscillator","gain","createGain","value","connect","destination","frequency","start","stop","onDestroy","off","stopAll","__decorate","AudioClip","Component","exports","default"],"mappings":"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","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class SimpleAudioManager extends cc.Component {\n    @property(cc.AudioClip)\n    audioClip: cc.AudioClip = null;\n\n    @property(cc.Node)\n    restoreButton: cc.Node = null; // 恢复音频的按钮\n    \n    @property(cc.Node)\n    autoRestoringTip: cc.Node = null; // 自动恢复提示\n    \n    // 保存音频状态\n    private playingAudioMap = {};\n    private backgroundTime = 0;\n    \n    onLoad() {\n        // 注册事件\n        cc.game.on(cc.game.EVENT_SHOW, this.handleGameShow, this);\n        cc.game.on(cc.game.EVENT_HIDE, this.handleGameHide, this);\n        \n        // 初始化UI\n        this.initUI();\n    }\n    \n    initUI() {\n        // 如果有恢复按钮，添加事件并隐藏\n        if (this.restoreButton) {\n            this.restoreButton.active = false;\n            this.restoreButton.on(cc.Node.EventType.TOUCH_END, this.onRestoreButtonClick, this);\n        }\n        \n        // 如果有自动恢复提示，隐藏它\n        if (this.autoRestoringTip) {\n            this.autoRestoringTip.active = false;\n        }\n    }\n    \n    // 播放音频的方法\n    play() {\n        if (!this.audioClip) return -1;\n        \n        const audioId = cc.audioEngine.playEffect(this.audioClip, false);\n        cc.audioEngine.setVolume(audioId, 1);\n        \n        // 保存这个音频信息\n        this.playingAudioMap[audioId] = {\n            clip: this.audioClip,\n            time: 0,\n            loop: false,\n            volume: 1\n        };\n        \n        cc.audioEngine.setFinishCallback(audioId, () => {\n            console.log(\"音频播放完成:\", audioId);\n            delete this.playingAudioMap[audioId];\n        });\n        \n        console.log(\"音频播放开始, ID:\", audioId);\n        return audioId;\n    }\n    \n    // 切换到后台\n    handleGameHide() {\n        console.log(\"应用进入后台\");\n        this.backgroundTime = Date.now();\n        \n        // 保存所有正在播放的音频的当前时间\n        for (const id in this.playingAudioMap) {\n            try {\n                const time = cc.audioEngine.getCurrentTime(parseInt(id));\n                this.playingAudioMap[id].time = time;\n                console.log(`保存音频${id}的播放位置: ${time}`);\n            } catch (e) {\n                console.error(`无法保存音频${id}的状态:`, e);\n            }\n        }\n    }\n    \n    // 切换回前台\n    handleGameShow() {\n        console.log(\"应用回到前台\");\n        \n        // 简单判断后台时间，如果时间短可能不需要特殊处理\n        const backgroundDuration = Date.now() - this.backgroundTime;\n        console.log(`在后台停留了 ${(backgroundDuration/1000).toFixed(1)} 秒`);\n        \n        // 仅在iOS上尝试恢复\n        if (cc.sys.os === cc.sys.OS_IOS) {\n            // 如果有提示，显示它\n            if (this.autoRestoringTip) {\n                this.autoRestoringTip.active = true;\n                \n                // 3秒后自动隐藏\n                this.scheduleOnce(() => {\n                    if (this.autoRestoringTip) {\n                        this.autoRestoringTip.active = false;\n                    }\n                }, 3);\n            }\n            \n            // 先尝试重建AudioContext\n            this.rebuildAudioContext();\n            \n            // 立即播放激活声音\n            this.playActivationSound();\n            \n            // 检查是否有需要恢复的音频\n            if (Object.keys(this.playingAudioMap).length > 0) {\n                // 稍微延迟后尝试自动恢复\n                this.scheduleOnce(() => {\n                    this.tryAutoRestore();\n                }, 0.5);\n            }\n        }\n    }\n    \n    // 尝试自动恢复\n    tryAutoRestore() {\n        if (Object.keys(this.playingAudioMap).length === 0) return;\n        \n        console.log(\"尝试自动恢复音频...\");\n        \n        // 再次播放激活声音\n        this.playActivationSound();\n        \n        // 尝试恢复\n        let anySuccess = false;\n        const newIds = {};\n        \n        for (const id in this.playingAudioMap) {\n            try {\n                const info = this.playingAudioMap[id];\n                \n                // 尝试创建新的音频\n                const newId = cc.audioEngine.playEffect(info.clip, info.loop);\n                console.log(`重新创建音频 ${id} -> ${newId}`);\n                \n                // 设置音量\n                cc.audioEngine.setVolume(newId, info.volume);\n                \n                // 设置播放位置\n                if (info.time > 0) {\n                    setTimeout(() => {\n                        try {\n                            cc.audioEngine.setCurrentTime(newId, info.time);\n                        } catch (e) {}\n                    }, 100);\n                }\n                \n                // 记录新ID\n                newIds[id] = newId;\n                anySuccess = true;\n                \n            } catch (e) {\n                console.error(`恢复音频${id}失败:`, e);\n            }\n        }\n        \n        // 更新播放列表\n        if (anySuccess) {\n     sleep(0.5)       // 清空旧列表\n            this.playingAudioMap = {};\n            \n            // 创建新列表\n            for (const oldId in newIds) {\n                const newId = newIds[oldId];\n                const info = this.playingAudioMap[oldId];\n                \n                this.playingAudioMap[newId] = {\n                    clip: info.clip,\n                    time: info.time,\n                    loop: info.loop,\n                    volume: info.volume\n                };\n                \n                // 设置完成回调\n                cc.audioEngine.setFinishCallback(newId, () => {\n                    console.log(\"音频播放完成:\", newId);\n                    delete this.playingAudioMap[newId];\n                });\n            }\n            \n            console.log(\"自动恢复成功!\");\n            \n            // 隐藏恢复按钮，因为已经成功恢复\n            if (this.restoreButton) {\n                this.restoreButton.active = false;\n            }\n            \n        } else {\n            console.warn(\"自动恢复失败，显示手动恢复按钮\");\n            \n            // 显示恢复按钮\n            if (this.restoreButton) {\n                this.restoreButton.active = true;\n                \n                // 10秒后自动隐藏\n                this.scheduleOnce(() => {\n                    if (this.restoreButton) {\n                        this.restoreButton.active = false;\n                    }\n                }, 10);\n            } else {\n                // 如果没有预设按钮，创建一个简单的\n                this.createSimpleRestoreButton();\n            }\n        }\n    }\n    \n    // 创建简单的恢复按钮\n    createSimpleRestoreButton() {\n        const node = new cc.Node('RestoreButton');\n        \n        // 设置大小\n        node.width = 300;\n        node.height = 100;\n        \n        // 添加背景\n        const background = node.addComponent(cc.Sprite);\n        background.spriteFrame = new cc.SpriteFrame();\n        \n        // 创建标签节点\n        const labelNode = new cc.Node('Label');\n        const label = labelNode.addComponent(cc.Label);\n        label.string = \"点击恢复音频\";\n        label.fontSize = 30;\n        labelNode.parent = node;\n        \n        // 添加到场景\n        node.parent = cc.director.getScene();\n        \n        // 居中显示\n        node.x = cc.winSize.width / 2;\n        node.y = cc.winSize.height / 2;\n        \n        // 添加点击事件\n        node.on(cc.Node.EventType.TOUCH_END, this.onRestoreButtonClick, this);\n        \n        // 保存引用\n        this.restoreButton = node;\n        \n        // 10秒后自动隐藏\n        this.scheduleOnce(() => {\n            if (node.isValid) {\n                node.removeFromParent();\n                this.restoreButton = null;\n            }\n        }, 10);\n    }\n    \n    // 恢复按钮点击处理\n    onRestoreButtonClick() {\n        console.log(\"用户点击恢复按钮\");\n        \n        // 隐藏按钮\n        if (this.restoreButton) {\n            this.restoreButton.active = false;\n        }\n        \n        // 重建音频上下文\n        this.rebuildAudioContext();\n        \n        // 播放激活声音\n        this.playActivationSound();\n        \n        // 尝试恢复\n        this.scheduleOnce(() => {\n            this.tryAutoRestore();\n        }, 0.2);\n    }\n    \n    // 重建音频上下文\n    rebuildAudioContext() {\n        try {\n            const sys = cc.sys;\n            \n            // 获取旧的上下文\n            const oldContext = sys.__audioSupport.context;\n            if (oldContext) {\n                console.log(\"旧AudioContext状态:\", oldContext.state);\n                \n                // 尝试关闭旧的\n                try {\n                    if (oldContext.close) {\n                        oldContext.close();\n                    }\n                } catch (e) {\n                    console.error(\"关闭旧AudioContext失败:\", e);\n                }\n            }\n            \n            // 创建新的\n            const AudioContextClass = window.AudioContext || window.webkitAudioContext;\n            if (!AudioContextClass) {\n                console.error(\"不支持AudioContext\");\n                return false;\n            }\n            \n            // 创建新的AudioContext\n            sys.__audioSupport.context = new AudioContextClass();\n            console.log(\"新AudioContext已创建，状态:\", sys.__audioSupport.context.state);\n            \n            return true;\n        } catch (e) {\n            console.error(\"重建AudioContext失败:\", e);\n            return false;\n        }\n    }\n    \n    // 播放激活声音\n    playActivationSound() {\n        try {\n            const context = cc.sys.__audioSupport.context;\n            if (!context) {\n                console.warn(\"找不到AudioContext\");\n                return;\n            }\n            \n            // 创建音频节点\n            const oscillator = context.createOscillator();\n            const gain = context.createGain();\n            \n            // 设置极低音量\n            gain.gain.value = 0.001;\n            \n            // 连接节点\n            oscillator.connect(gain);\n            gain.connect(context.destination);\n            \n            // 设置参数\n            oscillator.frequency.value = 200;\n            \n            // 播放和停止\n            oscillator.start();\n            setTimeout(() => {\n                try {\n                    oscillator.stop();\n                } catch (e) {}\n            }, 50);\n            \n            console.log(\"已播放激活声音\");\n            \n        } catch (e) {\n            console.error(\"播放激活声音失败:\", e);\n        }\n    }\n    \n    onDestroy() {\n        // 取消事件监听\n        cc.game.off(cc.game.EVENT_SHOW, this.handleGameShow, this);\n        cc.game.off(cc.game.EVENT_HIDE, this.handleGameHide, this);\n        \n        // 清理资源\n        try {\n            cc.audioEngine.stopAll();\n        } catch (e) {}\n    }\n}"],"file":"index.js"}
